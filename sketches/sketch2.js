// Instance-mode sketch for tab 2
registerSketch('sk2', function (p) {

  // timer state (GENERATED BY AI AI)
  p.timerDuration = 600;            // seconds (10 min)
  p.timerRunning = false;
  p.timerStartMillis = 0;           // when started (ms)
  p.timerPausedElapsed = 0;         // elapsed seconds when paused
  p.startPauseButton = null;

  p.setup = function () {
    p.createCanvas(p.windowWidth, p.windowHeight);
    p.angleMode(p.DEGREES);

    // create start/pause button (GENERATED BY AI)
    p.startPauseButton = p.createButton('Start');
    p.startPauseButton.mousePressed(function () { p.toggleTimer(); });

    // reset button (GENERATED BY AI)
    p.resetButton = p.createButton('Reset');
    p.resetButton.mousePressed(function () { p.resetTimer(); });

    // initial position; windowResized will keep it in sync
    p.positionTimerButton();
  };

  // helper: toggle start / pause (GENERATED BY AI)
  p.toggleTimer = function () {
    if (p.timerRunning) {
      // pause: record elapsed seconds
      p.timerPausedElapsed = (p.millis() - p.timerStartMillis) / 1000.0;
      p.timerRunning = false;
      p.startPauseButton.html('Start');
    } else {
      // start or resume: set startMillis so elapsed accounts for paused time
      p.timerStartMillis = p.millis() - p.timerPausedElapsed * 1000.0;
      p.timerRunning = true;
      p.startPauseButton.html('Pause');
    }
  };

  // helper: reset timer (GENERATED BY AI)
  p.resetTimer = function () {
    p.timerRunning = false;
    p.timerStartMillis = 0;
    p.timerPausedElapsed = 0; // remaining becomes full duration
    if (p.startPauseButton) p.startPauseButton.html('Start');
  };

  // return remaining whole seconds (>= 0) (GENERATED BY AI)
  p.getRemainingSecs = function () {
    const elapsedMs = p.timerRunning ? (p.millis() - p.timerStartMillis) : (p.timerPausedElapsed * 1000.0);
    const remainingMs = Math.max(0, p.timerDuration * 1000.0 - elapsedMs);
    return Math.floor(remainingMs / 1000.0);
  };

  // position button relative to canvas (call on setup + resize) (GENERATED BY AI)
  p.positionTimerButton = function () {
    if (!p.startPauseButton) return;
    // choose a spot near bottom-center of canvas
    const x = Math.max(10, Math.floor((p.width / 2) + 65));
    const y = Math.max(10, Math.floor((p.height / 2) + 385));
    p.startPauseButton.position(x, y);
    if (p.resetButton) p.resetButton.position(x + 55, y); // place reset to the right
  };

  p.draw = function () {
    p.background(239, 252, 252);
    p.clock();
  };

  p.clock = function() { 
    // Centering Coordinates to the Center of the Canvas and Setting the Radius
    p.translate(p.width / 2, p.height / 2);
    const R = p.min(p.width, p.height) * 0.45;

    // Egg White Clock Base
    p.strokeWeight(1.5);
    p.fill(245, 245, 245);
    p.ellipse(0, 0, 550, 550);
    p.fill(230, 230, 230);
    p.arc(0, 0, 550, 550, -90, -18);
    p.fill(235, 235, 235);
    p.arc(0, 0, 550, 550, -18, 54);

    // Egg Yolk Clock Base
    p.stroke(255, 199, 0);
    p.fill(255, 235, 125);
    p.ellipse(0, 0, 200, 200);
    p.fill(255, 209, 25);
    p.arc(0, 0, 200, 200, -90, -18);
    p.fill(255, 225, 94);
    p.arc(0, 0, 200, 200, -18, 54);

    // Text Labels for Boiled Egg Doneness
    p.textAlign(p.CENTER);
    p.textSize(20);
    p.fill("black");
    p.strokeWeight(0);
    p.text("Hard-Boiled", 0, -325);
    p.text("10 Min", 0, -300);

    p.text("Soft-Boiled", 330, -100);
    p.text("8 Min", 330, -75);

    p.text("Runny Yolk", 210, 260);   
    p.text("6 Min", 210, 285); 
    
    // Drawing the Clock Face Boundaries
    p.stroke("grey");
    p.strokeWeight(1.5);
    p.line(0, -275, 0, -100);

    p.stroke(255, 199, 0);
    p.line(0, -100, 0, 0);

    p.push();
    p.stroke("grey");
    p.rotate(72);
    p.line(0, -100, 0, -275);
    p.stroke(255, 199, 0);
    p.line(0, 0, 0, -100);
    
    p.stroke("grey");
    p.rotate(72)
    p.line(0, -100, 0, -275);
    p.stroke(255, 199, 0);
    p.line(0, 0, 0, -100);
    p.pop();

    p.stroke("black");

    // Timer Helpers (GENERATED BY AI)
    let remainingSecs = p.getRemainingSecs();

    // stop timer when full duration has elapsed (GENERATED BY AI)
    if (p.timerRunning && remainingSecs <= 0) {
      p.timerRunning = false;
      p.timerPausedElapsed = p.timerDuration; // ensure getRemainingSecs stays 0
      if (p.startPauseButton) p.startPauseButton.html('Start');
    }

    let secs = remainingSecs % 60;
    let mins = Math.floor(remainingSecs / 60);

    // Calculating the Angles for the Minute and Second Hands (GENERATED BY AI)
    let totalsecAngle = p.map(remainingSecs, 0, p.timerDuration, 0, 360);

    // Timer Hand
    p.push();
    p.rotate(totalsecAngle);
    p.stroke(180, 50, 50)
    p.strokeWeight(2);
    p.line(0, -101, 0, -R * 0.76);
    p.fill("white");
    p.circle(0, -R * 0.745, 5);
    p.pop();

    // Time Display Text
    p.strokeWeight(0);
    p.textSize(30);
    if (secs < 10) {
      secs = "0" + secs;
    }

    if (mins < 10) {
      mins = "0" + mins;
    }
    p.text(mins + " : " + secs , 0, 0 + 350);    

  }
  
  p.windowResized = function () { 
    p.resizeCanvas(p.windowWidth, p.windowHeight);
  };
});
